/**
 * Federwi V2 - Image Retrieval Service (Backend Proxy Version)
 * 
 * This module calls the backend /api/search-image endpoint to retrieve real images
 * from curated sources and generate AI descriptions of the retrieved content.
 */

// Prompt templates for different button types
const PROMPT_TEMPLATES = {
  space: "very high quality, wide aspect ratio image of a vibrant cosmic phenomena from JWST telescope or NASA",
  earth: "very high quality, wide aspect ratio image of stunning wildlife and nature photography",
  art: "very high quality, wide aspect ratio image of famous masterpiece artworks from museums"
};

/**
 * Initialize the OpenAI service
 */
document.addEventListener('DOMContentLoaded', () => {
  if (
    window.location.pathname.includes('index.html') ||
    window.location.pathname.endsWith('/') ||
    window.location.pathname === ''
  ) {
    initializeButtons();
  }
});

/**
 * Initialize the image generation buttons
 */
function initializeButtons() {
  const spaceButton = document.getElementById('space-btn');
  const earthButton = document.getElementById('earth-btn');
  const artButton = document.getElementById('art-btn');

  if (spaceButton) {
    spaceButton.addEventListener('click', () => generateImage('space'));
  }
  if (earthButton) {
    earthButton.addEventListener('click', () => generateImage('earth'));
  }
  if (artButton) {
    artButton.addEventListener('click', () => generateImage('art'));
  }
}

/**
 * Retrieve an image based on the selected type
 * @param {string} type - The image type (space, earth, art)
 */
async function generateImage(type) {
  try {
    updateButtonStates(true);
    updateDescription(`Finding ${type} image...`);
    const prompt = PROMPT_TEMPLATES[type];
    const response = await fetch('http://localhost:5000/api/search-image', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prompt, category: type })
    });
    const data = await response.json();
    if (response.ok && data.url) {
      document.body.style.backgroundImage = `url('${data.url}')`;
      // Use the dynamic description from the API, or fallback to static description
      const description = data.description || `This is a retrieved ${type} image based on your request. The image shows ${getDescriptionByType(type)}`;
      updateDescription(description);
    } else {
      throw new Error(data.error || 'Unknown error from backend');
    }
  } catch (error) {
    console.error('Error retrieving image:', error);
    updateDescription(`Error retrieving image: ${error.message}. Please try again.`);
  } finally {
    updateButtonStates(false);
  }
}

function updateDescription(text) {
  const descriptionElement = document.getElementById('image-description');
  if (descriptionElement) {
    descriptionElement.textContent = text;
  }
}

function updateButtonStates(isLoading) {
  const buttons = [
    document.getElementById('space-btn'),
    document.getElementById('earth-btn'),
    document.getElementById('art-btn')
  ];
  buttons.forEach(button => {
    if (button) {
      button.disabled = isLoading;
      if (isLoading) {
        button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Loading...';
      } else {
        button.textContent = button.id.split('-')[0].charAt(0).toUpperCase() + button.id.split('-')[0].slice(1);
      }
    }
  });
}

function getDescriptionByType(type) {
  switch (type) {
    case 'space':
      return 'the vastness of space with stars, galaxies and cosmic phenomena.';
    case 'earth':
      return 'the beauty of our planet with natural landscapes, mountains, oceans, or forests.';
    case 'art':
      return 'an artistic creation with colors, shapes, and creative expression.';
    default:
      return 'a creative image generated by AI.';
  }
}